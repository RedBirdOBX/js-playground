@page

@model JsPlayground.Pages.jquery.ajax.PostModel

@{
    string pageId = "Post";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = pageId;
}

@section LibraryHeader {jQuery}
@section BreadCrumbLibrary {jquery}
@section BreadCrumbAnchor {jq-ajax}
@section BreadCrumbChapter {ajax}
@section BreadCrumbPageName {@pageId.ToLower()}
@section PageName {@pageId}

<p>
    The jQuery <code>get()</code> and <code>post()</code> methods are used to request data from the server with an HTTP GET or POST request.
    Two commonly used methods for a request-response between a client and server are: GET and POST.
</p>

<ul>
    <li>GET - Requests data from a specified resource</li>
    <li>POST - Submits data to be processed to a specified resource</li>
</ul>

<p>
    GET is basically used for just getting (retrieving) some data from the server. Note: The GET method may return cached data.
</p>

<p>
    POST can also be used to get some data from the server. However, the POST method NEVER caches data,
    and is often used to <strong>send data</strong> along with the request.
</p>

<h4>jQuery $.post() Method</h4>

<p>
    <a href="https://www.w3schools.com/jquery/ajax_post.asp" target="_blank">
        https://www.w3schools.com/jquery/ajax_post.asp
    </a><br />
    <a href=" https://api.jquery.com/jquery.post/" target="_blank">
        https://api.jquery.com/jquery.post/
    </a>
</p>

<p>The <code>$.post()</code> method requests data from the server using an HTTP POST request.</p>

<p>The <code>$.get()</code> method requests data from the server with an HTTP GET request.</p>

<div class="m-3">
    <code>
        $.post({url}}, {data}, {callback function name }});
    </code>
</div>

<ul>
    <li>The URL required parameter specifies the URL you wish to request</li>
    <li>The optional <strong>data</strong> parameter specifies some data to send along with the request in the form of an <strong>anonymous object</strong>.</li>
    <li>The optional callback parameter is the name of a function to be executed if the request succeeds.</li>
</ul>

<p class="text-center"><button id="btnPost" class="btn btn-success" type="button">Post Test</button></p>

<p class="text-center"><small>The first attempt will be slow.  The API will have to 'wake up'.</small></p>

<p>
    Note: This should work but API is refusing the request.  It seems to think it's not json. I wrestled with this for
    a couple of hours before deciding to move on.  I even tried grabbing code-snippets from Postman and the issues just didn't stop.
    One after another. Using the <a href="Ajax">ajax()</a> method is the way to go.
</p>

<div class="card text-white bg-info m-5 col-12">
    <div class="card-body">
        <div id="demo-content">
        </div>
    </div>
</div>

<pre>
<code>
$(document).ready(function ()
{
    let url = "https://city-info-api-prod.azurewebsites.net/api/v1.0/cities/ce09626b-e19e-47f5-82f3-2bbf60866a47/pointsofinterest";
    let data = { name: "New Jack City", description: "Where the priests are." };
    let successCallBack = (data, status) => { $("#demo1").html(data + "&lt;br />&lt;br />Status: " + status); };
    $("#btnPost").click(function ()
    {
        $.post(url, data, successCallBack, "json");
    });
});
</code>
</pre>

<p>&nbsp;</p>

<p>&nbsp;</p>


@section Scripts
{
    <script>
        $(document).ready(function ()
        {
            let url = "https://city-info-api-prod.azurewebsites.net/api/v1.0/cities/ce09626b-e19e-47f5-82f3-2bbf60866a47/pointsofinterest";
            //let url = "http://localhost:5000/api/v1.0/cities/ce09626b-e19e-47f5-82f3-2bbf60866a47/pointsofinterest";
            //let url = "http://localhost:5000/api/v1.0/cities";
            let data = { name: "New Jack City", description: "Where the priests are." };
            let json = JSON.stringify(data);
            let successCallBack = (data, status) => { $("#demo1").html(data + "<br /><br />Status: " + status); };
            $("#btnPost").click(function ()
            {
               $.post(url, data, successCallBack, "json");
            });
        });
    </script>
}
