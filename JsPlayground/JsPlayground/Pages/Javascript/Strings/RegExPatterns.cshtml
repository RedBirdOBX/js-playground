@page

@model JsPlayground.Pages.Javascript.Strings.RegExPatternsModel

@{
    string pageId = "RegExPatterns";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = pageId;
}

@section LibraryHeader {JavaScript}
@section BreadCrumbLibrary {javascript}
@section BreadCrumbAnchor {js-strings}
@section BreadCrumbChapter {strings}
@section BreadCrumbPageName {@pageId.ToLower()}
@section PageName {@pageId}


<p>
    <strong>Brackets</strong> are used to find a range of characters.
</p>

<dl>
    <dt>[abc]</dt>
    <dd>Find any character between the brackets</dd>
    <dt>[a-z]</dt>
    <dd>Find within this range of characters</dd></Find>
    <dt>[^abc]</dt>
    <dd>Find any character NOT between the brackets</dd>
    <dt>[0-9]</dt>
    <dd>Find any digit between the brackets</dd>
    <dt>[^0-9]</dt>
    <dd>Find any digit NOT between the brackets</dd>
    <dt>(x|y)</dt>
    <dd>Find any of the alternatives specified</dd>
</dl>

<p>
    <strong>MetaCharacters</strong> are characters with a special meaning.
</p>

<dl>
    <dt>*</dt>
    <dd>Find any number of characters within the range</dd>
    <dt>{x}</dt>
    <dd>indicates how consecutive characters it should search within</dd>
    <dt>\d</dt>
    <dd>Find a digit</dd>
    <dt>\s</dt>
    <dd>Find a whitespace character</dd>
    <dt>\b</dt>
    <dd>Find a match at the beginning or at the end of a word</dd>
    <dt>\uxxxx</dt>
    <dd>Find the Unicode character specified by the hexadecimal number xxxx</dd>
</dl>

<p>
    <strong>Modifiers</strong> are characters with a special meaning.
</p>

<dl>
    <dt>*</dt>
    <dd>Find any number of characters within the range</dd>
    <dt>\i</dt>
    <dd>Perform case-insensitive matching</dd>
    <dt>\g</dt>
    <dd>Perform a global match (find all matches rather than stopping after the first match)</dd>
    <dt>\m</dt>
    <dd>Perform multiline matching</dd>
</dl>

<p>
    <strong>Quantifiers</strong> define quantities.
</p>

<dl>
    <dt>n+</dt>
    <dd>Matches any string that contains at least one n</dd>
    <dt>n*</dt>
    <dd>Matches any string that contains zero or more occurrences of n</dd>
    <dt>n?</dt>
    <dd>Matches any string that contains zero or one occurrences of n</dd>
</dl>

<pre>
<code>
// Example 1 - finds all occurrences of 'e'. Use 'i' for showing only first occurrence.
var str = "Is anyone out there?";
var patt1 = /[e]/g;
var results = str.match(patt1);
$("#demo1").html(results);

// Example 2
var str2 = "Is anyone out there?" - finds all occurrences of 'anyone';
var patt2 = /anyone/g;
var results2 = str2.match(patt2);
$("#demo2").html(results2);

// Example 3 - finds all matches for 'is' (even partials).
var str3 = "Do you know if this is all there is?";
var patt3 = /[is]/gi;
var results3 = str3.match(patt3);
$("#demo3").html(results3);

// Example 4 - finds '1234'
var str4 = "123456789";
var patt4 = /[1-4]/g;
var results4 = str4.match(patt4);
$("#demo4").html(results4);
</code>
</pre>

<p><a href="https://www.w3schools.com/js/js_regexp.asp" target="_blank">https://www.w3schools.com/js/js_regexp.asp</a></p>
<p><a href="http://buildregex.com/" target="_blank">http://buildregex.com/</a></p>
<p><a href="https://www.regexbuddy.com/create.html" target="_blank">https://www.regexbuddy.com/create.html</a></p>

<p>&nbsp;</p>

<p>&nbsp;</p>


@section Scripts
{
}
