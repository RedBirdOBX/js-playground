@page

@model JsPlayground.Pages.Javascript.Strings.MatchModel

@{
    string pageId = "Match";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = pageId;
}

@section LibraryHeader {JavaScript}
@section BreadCrumbLibrary {javascript}
@section BreadCrumbAnchor {js-strings}
@section BreadCrumbChapter {strings}
@section BreadCrumbPageName {@pageId.ToLower()}
@section PageName {@pageId}

<p>
    The <code>match()</code> method searches a string for a match
    against a regular expression, and returns the matches, as an <strong>Array</strong>
    object.
</p>

<div class="card text-white bg-info mt-5">
    <div class="card-body">
        <div id="demo1"></div>
        <div id="demo2"></div>
    </div>
</div>

<pre>
<code>
let demo1 = document.getElementById("demo1");
let str = "The rain in SPAIN stays mainly in the plain.";
let results = str.match(/ain/g);
demo1.innerHTML = results;

// example 2 - finds '1234'
let demo2 = document.getElementById("demo2");
let str4 = "123456789";
let patt4 = /[1-4]/g;
let results2 = str4.match(patt4);
demo2.innerHTML = results2;
</code>
</pre>

<hr />

<p>
    <strong>Regular Expression Modifiers</strong><br />
    Modifiers can be used to perform case-insensitive searches.
</p>

<ul>
    <li><code>i</code> - Perform case-insensitive matching</li>
    <li><code>g</code> - Perform a global match (find all matches rather than stopping after the first match)</li>
    <li><code>m</code> - Perform multiline matching</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>


@section Scripts
{
    <script>
        // example 1
        let demo1 = document.getElementById("demo1");
        let str = "The rain in SPAIN stays mainly in the plain.";
        let results = str.match(/ain/g);
        demo1.innerHTML = results;

        // example 2 - finds '1234'
        let demo2 = document.getElementById("demo2");
        let str4 = "123456789";
        let patt4 = /[1-4]/g;
        let results2 = str4.match(patt4);
        demo2.innerHTML = results2;
    </script>
}
