@page

@model JsPlayground.Pages.TypeScript.Classes.ConstructorsModel

@{
    string pageId = "Constructors";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = pageId;
}

@section LibraryHeader {TypeScript}
@section BreadCrumbLibrary {typescript}
@section BreadCrumbAnchor {ts-classes}
@section BreadCrumbChapter {classes}
@section BreadCrumbPageName {@pageId.ToLower()}
@section PageName {@pageId}


<p>
    Instead of referencing the class name itself (like in c#), constructors must use the <code>constructor</code> keyword.
</p>

<pre>
<code>
class Spaceship
{
    // Properties
    NumberOfEngines: number;
    ShipName: string;

    // constructor
    constructor(engines: number, shipName: string)
    {
    this.NumberOfEngines = engines;
    this.ShipName = shipName;
    }
}
</code>
</pre>

<p>&nbsp;</p>

<p>
    There is another way for defining a <code>constructor</code> which takes incoming arguments and sets properties on the class.
    See the example below.
</p>

<pre>
<code>
// Example 1
class Spaceship
{
    // Properties
    NumberOfEngines: number;
    ShipName: string;

    // constructor
    constructor(engines: number, shipName: string)
    {
        this.NumberOfEngines = engines;
        this.ShipName = shipName;
    }
}

// Example 2
class Spaceship
{

    // This technique takes the arguments and automatically creates the arguments into properties
    // of the class.  Notice the access modifiers too.  These are public but you can also use private, readonly, and
    // protected.  These are known as PARAMETER PROPERTIES.

    // constructor
    constructor(<mark>public NumberOfEngines: number, public ShipName: string</mark>)
    {
    }
}
</code>
</pre>

<p>&nbsp;</p>

@section Scripts
{
}